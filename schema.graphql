# Entrypoint Query / Mutations
type Query {
    # used by system / workers
    systemQuery: SystemQuery
    authorizedQuery(
        role: ID!
    ): AuthorizedQuery
    publicQuery: PublicQuery
}
type SystemQuery {
    # Payment STEP 4a - for worker, webhook only ingested the raw data from stripe.
    getPaymentsToProcess : [ID!]
    getLastLikesLowStock : [Likes!]
    getEmailJobs(input: GetEmailJobsInput! ): GetEmailJobsPayload!
}
type AuthorizedQuery {
    getLikes(input: GetLikesInput!) : LikesPayload!
    getCartInfo(client: ID!): CartInfoPayload!
    listAllOrders(first: Int!, offset: Int!) : allOrderDetailsPayload!
    orderDetails(order: ID!) : orderDetailsPayload!
    getProducts(input: GetProductsInput!) : GetProductsPayload!
    getProduct(input: ID!) : GetProductPayload!
    userHasPermission(input: UserHasPermissionInput! ) : UserHasPermissionPayload!

}
type PublicQuery {
    getProducts(input: GetProductsInput!) : GetProductsPayload!
    getProduct(input: ID!) : GetProductPayload!
    # getting files is uncommon. Expectation is to include file links in related queries.
    # if not found then is null, no error is raised.
    getFile(input: ID!): Files
    getFiles(input: [ID!]!): [Files]!
}

type Mutation {
    # used by system / workers
    systemMutation: SystemMutation
    authorizedMutation(
        role: ID!
    ): AuthorizedMutation
    publicMutation: PublicMutation
}
type SystemMutation {
    createEmailJob(input: CreateEmailJobInput!): BaseValidatedResponsePayload!
    updateEmailJob(input: UpdateEmailJobInput!):  UpdateEmailJobPayload!
    lowStockPromotionsCronJob : BaseResponsePayload!
    # Payment STEP 3 - comes from an API Gateway or a REST endpoint that passes it to graphql as GQL is not supported by Stripe.
    stripePaymentWebhook(stripeWebhookJSON: String! ) : BaseResponsePayload! # The basic one as to fail to one http code only.
    # Payment STEP 4b - Locks the current payment to process and returns the record.
    lockPayment(id: ID!) : LockPaymentPayload!
    # Payment STEP 4c - Worker updates the necessary fields, regarding the payment itself it will just update status.
    processPayment(input: ProcessPaymentInput!) : BaseResponsePayload!
}
type AuthorizedMutation {
    likeProduct(input: LikeProductInput!) : LikeOperationPayload!
    removeLike(input: RemoveLikeInput ) : LikeOperationPayload!
    # only managers in edge cases will use this, because emails are mostly send from other endpoints so most will be system.
    createEmailJob(input: CreateEmailJobInput!): BaseValidatedResponsePayload!
    addToCart(client: ID!, product: ID!, quantity: Int!): BaseResponsePayload!
    removeFromCart(client: ID! product: ID!) : BaseResponsePayload!
    modifyQuantityCart(client: ID!, product: ID!, newQuantity: Int!): BaseResponsePayload!
    createOrder(input: CreateOrderInput) : BaseValidatedResponsePayload!
    createProduct(input: CreateProductInput! ) : BaseValidatedResponsePayload!
    deleteProduct(input: ID!) : BaseResponsePayload!
    updateProduct(input: UpdateProductInput! ) : BaseValidatedResponsePayload!
    # Payment STEP 1
    createPayment(input: CreatePaymentInput! ) : BaseValidatedResponsePayload!
    updatePaymentDetails(input: UpdatePaymentDetailsInput! ) : BaseValidatedResponsePayload!

    createFile(input: CreateFileInput! ): BaseResponsePayload!
    deleteFile(input: ID!): BaseResponsePayload!
    logoutUser(token: String!): BaseValidatedResponsePayload!
}
type PublicMutation {
    createUser(input: CreateUserInput!) : BaseValidatedResponsePayload!
    loginUser(input: UserLoginInput): LoginUserPayload!
    forgotPassword(email: String!) : BaseValidatedResponsePayload!
    resetPassword(input: UserResetPassword!) : BaseValidatedResponsePayload!
}


# REUSABLE / INHERITABLE components
#region
# resolves to a single type of error or condition
interface IBaseResponsePayload {
    code: Int!
    description: String!
}
# resolves to a single type of error or condition
type BaseResponsePayload {
    code: Int!
    description: String!
}
# can return multiple kinds of errors at once
interface IBaseValidatedResponsePayload {
    validationErrors: [String!]
    conditionErrors: [String!]
    code: Int!
    description: String
}
# can return multiple kinds of errors at once
type BaseValidatedResponsePayload {
    validationErrors: [String!]
    conditionErrors: [String!]
    code: Int!
    description: String
}
interface BasePaginationPayload {
    count: Int!
    totalCount: Int!
    currentPage: Int!
    totalPages: Int!
    next: Boolean!
    previous: Boolean!
}
#endregion

type Roles {
    id: ID!
    name: String!
}

# USERS/Auth ENDPOINTS
#region
type Users{
    firstName: String!
    lastName: String!
    id: ID!
    email: String!
    sessionToken: String # hashed
    role: Roles!
    createdAt: String!
    lastLoginAt: String
    lastSignoutAt: String
    passwordHash: String!
    passwordLastUpdated: String!
    failedLoginAttempts: Int!
    failedLoginAttemptsTimestamps: [String!] # the list is not required as it can be empty
    passwordResetToken: String # hashed
    passwordResetRequestsCount: Int!
    passwordResetRequestsTimestamps: [String!]
}
# POST CREATE USER
input CreateUserInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
    repeatPassword: String!
}

# POST LOGIN
input UserLoginInput {
    email: String!
    password: String!
}

# POST RESET
input UserResetPassword {
    resetToken: String!
    newPassword: String!
    repeatNewPassword: String!
}

type LoginUserPayload implements IBaseValidatedResponsePayload {
    code: Int!
    validationErrors: [String!]
    description: String
    conditionErrors: [String!]
    token: String
}



#endregion

# Permission endpoints
#region
type Permits {
    id: ID!
    role: Roles!
    permit: Permissions!
    isAllowed: Boolean!
}

type Permissions {
    id: ID!
    name: String!
    appliesToTable: String!
    appliesToField: String
}

#
input UserHasPermissionInput {
    user: ID # if no id is passed, assumes anonymous, check permits for public role
    permission: ID!
}

type UserHasPermissionPayload {
    isAllowed: Boolean!
    errors: String
    errorCode: Int
}


#endregion

type Categories {
    id: ID!
    name: String!
}

type Statuses {
    id: ID!
    name: String!
    forTable: String!
}


# Files endpoints
#region
type Files {
    id: Int!
    name: String!
    size: Int!
    url: String!
    createdAt: String!
}
# UPLOAD A FILE
input CreateFileInput {
    name: String!
    base64: String!
}





#endregion

# PAYMENTS ENDPOINTS
#region
type Payments {
    id: ID!
    closed: Boolean!
    paymentStatus: Statuses!
    createdAt: String!
    stripeEventId: String!
    stripeApiVersion: String!
    stripeWebhook: String # stringified JSON
    stripePaymentIntent: String #stringified JSON
}

input CreatePaymentInput {
    order: ID!
    stripeApiVersion: String # defaults to 4.3 for example
    amount: Float
    currency: String!
}

# step 2 of payment lifecycle, only these are expected here as this will update de object with stripe.
input UpdatePaymentDetailsInput {
    cardNumber: String!
    expiryDate: String!
    cvc: String!
    confirmed: Boolean!
}

input ProcessPaymentInput{
    closed: Boolean
    status: ID
}

type LockPaymentPayload implements IBaseResponsePayload {
    description: String!
    code: Int!
    payment: Payments
}





#endregion

# PRODUCTS ENDPOINTS
#region
type Products {
    id: ID!
    disabled: Boolean!
    name: String!
    details: String!
    categories: [Categories!]!
    price: Float!
    stock: Int!
    createdBy: Users!
    createdAt: String!
    lastUpdatedBy: Users
    lastUpdatedAt: String
    images: [Files!] # list not required as item could not have an image (i.e. unpublished in progress)
    deleted: Boolean!
}

input GetProductsInput {
    first: Int!
    offset: Int!
    pageSize: Int
    categoryFilter: [ID!]
    search: String
    likedOnly: Boolean
    omitImages: Boolean
    sort: String
}

type GetProductsPayload implements IBaseValidatedResponsePayload & BasePaginationPayload {
    products: [Products!]
    count: Int!
    totalCount: Int!
    currentPage: Int!
    totalPages: Int!
    next: Boolean!
    previous: Boolean!
    code: Int!
    conditionErrors: [String!]
    description: String
    validationErrors: [String!]
}

input CreateProductInput {
    name: String!
    details: String!
    categories: [ID!]!
    price: Float!
    stock: Int!
    images: [ID!] # list not required as item could not have an image (i.e. unpublished in progress)
}

type GetProductPayload implements IBaseResponsePayload {
    code: Int!
    description: String!
    product: Products
}
# nothing required, if not received assumed no change.
input UpdateProductInput {
    disabled: Boolean
    name: String
    details: String
    categories: [ID!]
    price: Float
    stock: Int
    images: [ID!]
}





#endregion

# Orders endpoints
#region
type Orders {
    id: Int!
    client: Users
    payments: [Payments!]
    orderDetails: [OrderDetails!]!
    paymentStatus: Statuses!
    orderStatus: Statuses!
    createdAt: String!
}
type OrderDetails {
    id: ID!
    order: Orders!
    product: Int!
    productQuantity: Int!
    pricePurchasedAt: Float!
}

type ListAllOrderdsPayload implements IBaseResponsePayload{
    orders: [Orders!]
    description: String!
    code: Int!
}

input CreateOrderInput {
    itemsToBuy: [ID!] #cart ids / selected items to buy, allow for leaving things in the cart.
    otherInfo: String! # shipping maybe? to be defined.
}

type allOrderDetailsPayload implements IBaseResponsePayload {
    description: String!
    code: Int!
    orders: [Orders!]
}

type orderDetailsPayload implements IBaseResponsePayload{
    order: Orders!
    code: Int!
    description: String!
}



#endregion

# CART ENDPOINTS
#region
type Carts {
    id: ID!
    client: Users!
    product: Products!
    productQuantity: Int!
    createdAt: String!
}
type CartInfoPayload implements IBaseResponsePayload{
    cart: [Carts!]
    code: Int!
    description: String!
}




#endregion



# Mailer Service Endpoints
#region
type EmailQueue {
    id: ID!
    queueStatus: Statuses!
    senderName: String
    senderEmail: String!
    recipientName: String
    recipientEmail: String!
    replyTo: String
    subject: String!
    textContent: String!
    htmlContent: String!
    attachments: [Files!]
}
# POST Email Job
input CreateEmailJobInput {
    senderName: String
    senderEmail: String!
    recipientName: String
    recipientEmail: String!
    replyToEmail: String
    subject: String
    textContent: String!
    htmlContent: String!
    attachments: [ID!]
}

# GET EMAIL JOBS (worker endpoint)
input GetEmailJobsInput {
    limit: Int!
    status: ID! # id of status to filter by
}
type GetEmailJobsPayload {
    jobs: [ID!] # NOT returning the jobs themselves as the worker would spike in memory usage. I rather it be chatty,
    #specially when the rate of the worker is defined by parameters and is fixed. Thus N+1 is not out of control.
    # another way could be to paginate to like 3 items, but still query should be converted to mutation if I want to also lock them.
    count: Int!
}

# PUT / UPDATE EMAIL STATUS (worker endpoint)
input UpdateEmailJobInput {
    jobId: ID!
    newStatus: ID!
}
type UpdateEmailJobPayload{
    code: Int! # could error as item is already locked status
    description: String!
    jobData: EmailQueue!
}





#endregion

# Likes endpoints
#region
type Likes {
    id: ID!
    client: Users!
    product: Products!
    createdAt: String!
}
# GET LIKES
input GetLikesInput {
    user: ID!
}
type LikesPayload {
    errors: String
    likes: Likes
}


# LIKE A PRODUCT and REMOVE A LIKED PRODUCT
input LikeProductInput {
    productLiked: ID!
    user: ID!
}
input RemoveLikeInput {
    likeToRemove: ID!
}
type LikeOperationPayload {
    errors: String
    likeResultCode: Int!
    likeResult : String
}

#endregion
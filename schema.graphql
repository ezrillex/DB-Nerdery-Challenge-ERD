type Users{
    firstName: String!
    lastName: String!
    id: ID!
    email: String!
    sessionToken: String
    role: Roles!
    createdAt: String!
    lastLoginAt: String
    lastSignoutAt: String
    passwordHash: String!
    passwordLastUpdated: String!
    failedLoginAttempts: Int!
    failedLoginAttemptsTimestamps: [String!] # the list is not required as it can be empty
    passwordResetToken: String
    passwordResetRequestsCount: Int!
    passwordResetRequestsTimestamps: [String!]
}

type Roles {
    id: ID!
    name: String!
}

type Permits {
    id: ID!
    role: Roles!
    permit: Permissions!
    isAllowed: Boolean!
}

type Permissions {
    id: ID!
    name: String!
    appliesToTable: String!
    appliesToField: String
}

type Categories {
    id: ID!
    name: String!
}

type Statuses {
    id: ID!
    name: String!
    forTable: String!
}

type Files {
    id: Int!
    name: String!
    size: Int!
    url: String!
    createdAt: String!
}

type Products {
    id: ID!
    disabled: Boolean!
    name: String!
    details: String!
    categories: [Categories!]!
    price: Float!
    stock: Int!
    createdBy: Users!
    createdAt: String!
    lastUpdatedBy: Users
    lastUpdatedAt: String
    images: [Files!] # list not required as item could not have an image (i.e. unpublished in progress)
    deleted: Boolean!
}



type Carts {
    id: ID!
    client: Users!
    product: Products!
    productQuantity: Int!
    createdAt: String!
}

type Orders {
    id: Int!
    client: Users
    payments: [Payments!]
    orderDetails: [OrderDetails!]!
    paymentStatus: Statuses!
    orderStatus: Statuses!
    createdAt: String!
}

type Payments {
    id: ID!
    closed: Boolean!
    paymentStatus: Statuses!
    createdAt: String!
    stripeEventId: String!
    stripeApiVersion: String!
    stripeWebhook: String # stringified JSON
    stripePaymentIntent: String #stringified JSON
}

type OrderDetails {
    id: ID!
    order: Orders!
    product: Int!
    productQuantity: Int!
    pricePurchasedAt: Float!
}

type EmailQueue {
    id: ID!
    queueStatus: Statuses!
    senderName: String
    senderEmail: String!
    recipientName: String
    recipientEmail: String!
    replyTo: String
    subject: String!
    textContent: String!
    htmlContent: String!
    attachments: [Files!]
}

type Likes {
    id: ID!
    client: Users!
    product: Products!
    createdAt: String!
}

# Likes mutation
input LikesInput {
    productLiked: ID!
    user: ID!
}

type LikesPayload {
    errors: String
    likes: Likes
}

type Mutation {
    likeProduct(input: LikesInput!) : LikesPayload!
}




Table roles {
  id uuid [primary key]
  role_name varchar
}
/*example values
  create
  update
  delete
  disable
  view_all
  view_self
  upload*/
Table permissions {
  id uuid [primary key]
  name varchar [not null]
  applies_to_table varchar [not null]
  applies_to_column varchar [null, default: 'if null then access to whole row?']
}


Enum order_status {
  pending_fulfillment
  fulfillment_in_progress
  shipped
  delivered
  delivery_cancelled
  returned
}

Enum queue_status {
  pending
  in_progress
  success
  failed
}

enum payments_statuses{
  requires_payment_method
  requires_confirmation
  requires_action
  processing
  succeded
  cancelled
}

enum webhook_statuses {
  pending
  batched_locked
  processing
  done
  error
}

Table users {
  id uuid [primary key]
  first_name varchar [not null]
  last_name varchar [not null]
  email email [not null]
  session_token char(64) [null, note: 'generated same as reset token']
  role_id uuid [not null, default: 1]
  created_at timestamp [default: 'now()']
  last_login_at timestamp [null]
  last_signout_at timestamp [null]
  password_hash char(32) [not null, note: 'md5 + salt']
  password_last_updated timestamp [not null]
  failed_login_attempts integer [default: 0]
  failed_login_attempts_timestamps timestamp[] [null]
  password_reset_token char(32) [null, note: 'https://it-tools.tech/token-generator?length=32']
  password_reset_requests integer [default: 0]
  password_reset_requests_tiemstamps timestamp[]
}

// renamed disabled to publish
Table products {
  id uuid [primary key]
  published boolean [default: true]
  name varchar [not null]
  details varchar [not null]
  category_id uuid[] [null]
  created_by uuid [not null]
  created_at timestamp [default: 'now()']
  last_updated_by integer [null]
  last_updated_at timestamp [null]
  deleted boolean [default: false, not null]
}

// this is the famous SKU, maybe later refactor as SKU once I figure out multi variations
// design decision a single dropdown for only one variation kind. ie. color and capacity mixes for iphone is a 4 item list for 2 colors and 2 capacities.
Table product_variations {
  id uuid [primary key]
  product_id uuid [not null]
  variation_title string [not null, note: 'Limit to what a dropdown puede tener']
  price numeric [not null, default: 0]
  stock int [not null, default: 0]
  images uuid[] [null]
  published boolean [default: true]
  deleted boolean [default: false, not null]
}
/*
db has rows like
group \ title \ price \ stock
color
*/

Table files {
  id uuid [primary key]
  name varchar [not null]
  size integer [not null, note: 'in bytes']
  url varchar [note: 'URL TO THE CDN HOSTED FILE']
  created_at timestamp [default: 'now()', not null]
}

// the existence of a product here means there is a like.
Table likes {
  id uuid [primary key]
  client_id uuid [not null]
  product_id uuid [not null]
  variation_id uuid [not null]
  created_at timestamp [not null, default: 'now()', note: 'for marketing logic']
}

Table categories {
  id uuid [primary key]
  name varchar [not null]
}

// calls made to endpoints from users have to first query if there is a permission setup for the action they are trying to perform
Table permits {
  id uuid [primary key]
  role_id uuid [not null]
  permit integer [not null]
}

Table cart {
  id uuid [primary key]
  client_id uuid [not null]
  product_id uuid [not null]
  variation_id uuid unique [not null]
  product_qty integer [not null, default: 1, note: 'assume we don-t sell fractions like a supermarket (0.5 kg of beef i.e.)']
  added_at timestamp [not null, default: 'now()']
}

Table orders {
  id uuid [primary key]
  client_id uuid [not null]
  payment_status payments_statuses [not null, default: 'id of pending']
  order_status order_status [not null, default: 'pending_fulfillment']
  created_at timestamp [not null, default: 'now()']
}

Table order_status_changes {
  id uuid [primary key]
  order_id uuid [not null]
  status order_status [not null]
  event_timestamp timestamp [not null, default: 'now()']
}

Table order_details {
  id uuid [primary key]
  order_id uuid [not null]
  product_id uuid [not null]
  variation_id uuid [not null]
  product_qty integer [not null]
  price_purchased_at numeric [not null]
}

Table payment_intents {
  id uuid [primary key]
  order_id uuid [not null]
  closed boolean [not null, default: false]
  payment_status payments_statuses [not null, default: 'pending id']
  created_at timestamp [not null, default: 'now()']
  stripe_event_id varchar [null]
  stripe_api_version varchar [null]
  stripe_payment_intent JSON [not null, note: 'the request that is sent']
}

// no audit needed since we dont do updates to the data here.
Table incoming_payment_webhooks {
  id uuid [primary key]
  order_id uuid [null, note: 'nullable in case request received is garbled or has invalid order id']
  status webhook_statuses [not null, default: 'pending']
  data JSON [not null]
  created_at timestamp [not null]
  processed_at timestamp [null, note: 'set when worker performs business logic and collapses to done or error status']
}

// one row per status update/ any change
Table payments_audit {
  id uuid [primary key]
  snapshot_timestamp timestamp [not null, default: 'now()']
  // keep in sync with payment intent columns
  payment_id uuid [not null]
  closed boolean [not null, default: false]
  payment_status payments_statuses [not null, default: 'pending id']
  created_at timestamp [not null, default: 'now()']
  stripe_event_id varchar [null]
  stripe_api_version varchar [null]
  stripe_webhook JSON [null]
  stripe_payment_intent JSON [not null, note: 'the request that is sent']

}

// consumed by mailer worker
Table email_queue {
  id uuid [primary key]
  queue_status queue_status [not null, default: 'id of pending']
  sender_name varchar [null]
  sender_address email [not null]
  recipient_name varchar [null]
  recipient_address email [not null]
  reply_to email [null]
  subject varchar [not null]
  text_content varchar [null, note: 'we need the app to check if the other is null, both cant be null']
  html_content varchar [null, note: 'we need the app to check if the other is null, both cant be null']
  attachments uuid[] [null]
}

Ref: likes.client_id > users.id
Ref: likes.product_id > products.id
Ref: users.id < products.created_by
Ref: categories.id <> products.category_id
Ref: cart.client_id - users.id
Ref: cart.product_id > products.id
Ref: orders.id < order_details.order_id
Ref: users.id < orders.client_id
Ref: email_queue.attachments <> files.id
Ref: product_variations.images <> files.id
Ref: order_details.product_id > products.id
Ref: "permissions"."id" < "permits"."permit"
Ref: "roles"."id" < "permits"."role_id"
Ref: "roles"."id" < "users"."role_id"
Ref: "products"."id" < "product_variations"."product_id"
Ref: "payment_intents"."id" < "payments_audit"."payment_id"
Ref: "orders"."id" < "incoming_payment_webhooks"."order_id"
Ref: "orders"."id" < "order_status_changes"."order_id"
Ref: "orders"."id" < "payment_intents"."order_id"
Ref: "cart"."variation_id" < "product_variations"."id"
Ref: "order_details"."variation_id" < "product_variations"."id"
Ref: "product_variations"."id" < "likes"."variation_id"
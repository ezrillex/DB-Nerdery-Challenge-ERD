openapi: 3.0.3
# TODO Get emails job queue endpoint is missing
info:
  title: Ezra e-commerce
  version: '1.0.0'
components:
  securitySchemes:
    bearer_user_auth:
      type: http
      scheme: bearer
    bearer_system_auth:
      type: http
      scheme: bearer
    public_no_auth:
      type: http
      scheme: basic
  responses:
    '401':
      description: 'The provided authentication token is not valid (user is not logged in or token expired). Or a parameter requires more permissions than the requestor has.'
    '400':
      description: 'There are validations erros, format of values is wrong or not as expected or do not meet specified conditions.'
      content:
        application/json:
          example:
            validation_errors:
              - field: 'password1'
                reason: 'value is not valid. Received a string with length of 2000. Maximum is 32.'
              - field: 'password2'
                reason: 'value is not valid. Received an empty string'
            condition_errors:
              - condition: 'is_token_expired'
                reason: 'The token received is expired'
              - condition: 'passwords_match'
                reason: 'password1 value does not match with password2 value'

    '404':
      description: 'The data requested could not be found or the results count is 0.'
    '429':
      description: 'Too many requests, requests are being rate limited.'
    '403':
      description: 'The user making the request lacks the necessary permissions, or the data required does not belong to the user.'
paths:
  /auth/login:
    post:
      security:
        - public_no_auth: []
      tags:
        - Authentication
      summary: 'Authenticates user credentials with the server and provides the corresponding user object.'
      description: 'This endpoint handles user login attempts, sending an email notification for each attempt. It monitors login activity over a 24-hour period, locking the account if excessive failed attempts are detected. When a user successfully logs in, all existing sessions are invalidated, and a new bearer token is issued. If an incorrect password is entered, an error indicating "wrong password" is returned, the attempt is logged with a timestamp, and the failed attempt count is incremented. If the provided user does not exist, a "not found" error is returned. Despite account locking due to excessive failed attempts, users may attempt to log in again, with email notifications sent for each request.'
      requestBody:
        required: true
        content:
          application/json:
            example:
              email: me@email.com
              password: supersafe123!
      responses:
        '200':
          description: >-
            credentials are valid, responds with user object. resets failed login attempts. Updates last login at. and clears the password reset timestamps and returns the session token for the user to authenticate to server in further requests.
        '400':
          $ref: "#/components/responses/400"
        '404':
          $ref: "#/components/responses/404"
        '429':
          $ref: '#/components/responses/429'
  /auth/logout:
    post:
      tags:
        - Authentication
      security:
        - bearer_user_auth: []
      summary: 'Logs the user out. '
      description: "This endpoint updates the 'last logged at' timestamp to record the user's logout. If multiple logout attempts are made, the request will fail. Additionally, the operation will fail if the user's login session has already expired."
      responses:
        '200':
          description: logged out succesfully!
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '429':
          $ref: '#/components/responses/429'
  /auth/forgot:
    post:
      tags:
        - Authentication
      summary: 'Initiates the password recovery process. '
      description: 'This endpoint verifies whether the user has exceeded the limit of recovery attempts within a 24-hour period and proceeds with the recovery process if allowed. Excessive attempts within the time frame will result in limitations. As a publicly accessible API, it is subject to rate limiting.'
      security:
        - public_no_auth: []
      requestBody:
        required: true
        content:
          application/json:
            example:
              email: my_email_from_2nd_grade@mail.com
      responses:
        '200':
          description: >-
            Increases the count of attempts, adds a timestamp. Sets the reset token. Adds an email to the email queue with a link with the attempt token.
        '400':
          $ref: "#/components/responses/400"
        '404':
          $ref: "#/components/responses/404"
        '429':
          $ref: '#/components/responses/429'
  /auth/reset:
    post:
      tags:
        - Authentication
      security:
        - public_no_auth: []
      summary: "Updates the user's password."
      description: 'Verifies the validity and expiration status (24 hours) of the provided reset password token, checks if the new password meets the required parameters for minimum and maximum length, and if valid, hashes and updates the password. Returns a 404 error if the token is not found.'
      requestBody:
        required: true
        content:
          application/json:
            example:
              reset_token: TE3fEU8S80rg1EelA3jmEetVokFvLgTK
              password: definitelywontforget!213
              repeat_password: definitelywontforget!213
      responses:
        '200':
          description: reset successfull. Goes to login screen, does not auto login.
        '404':
          $ref: "#/components/responses/404"
        '400':
          $ref: "#/components/responses/400"
        '429':
          $ref: '#/components/responses/429'
  /users:
    post:
      tags:
        - Authentication
      security:
        - public_no_auth: []
      summary: 'Registers a new user. '
      description: 'Adds a new user to the database with a default role of "client." To promote the account to a "manager" role, a system administrator must perform an account role update.'
      requestBody:
        required: true
        content:
          application/json:
            example:
              first_name: Johns
              last_name: Smiths
              email: johns.smiths@email.com
              password: password123$
              repeat_password: password123$
      responses:
        '201':
          description: sign up successful.  Sends Welcome email. Then redirects user to login screen.
        '409':
          description: 'Error user with the provided email already exists'
        '400':
          $ref: "#/components/responses/400"
        '429':
          $ref: '#/components/responses/429'
  /products:
    get:
      security:
        - public_no_auth: []
        - bearer_user_auth: []
      tags:
        - Products
      summary: 'Retrieves a paginated list of products and serves as the product search endpoint. '
      description: 'The endpoint behavior varies based on permissions: permission managers can access all products, while permission clients are restricted to their own. By default, clients will not see disabled or out-of-stock products. Additional filtering, such as by disabled status, stock status, updated by, or creation date, must be handled client-side, or developers can be contacted to consider adding a dedicated dashboard endpoint for advanced filtering. Unauthenticated requests will fail if such functionality is attempted.'
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            minimum: 1
            default: 10
        - in: query
          name: category
          schema:
            type: array
            items:
              type: integer
          description: A comma separated list of category ids
        - in: query
          name: search
          schema:
            type: string
          description: a text parameter to search for in name and description.
        - in: query
          name: likes
          schema:
            type: boolean
            default: false
          description: returns only products the user has liked, ignores if anonymous
        - in: query
          name: include_images
          schema:
            type: boolean
            default: true
          description: includes the URLs of the images, if false omits this. Useful for administrative dashboards which dont use an image or for other text only UIs.
        - in: query
          name: sort_by
          schema:
            type: string
          description: accepts a field name to order the items by. ASC by default, if - on start of string is DESC.
          examples:
            by_price:
              summary: High to Low price
              value: '-price '
            by_name:
              summary: A to Z name
              value: 'name'

      responses:
        '200':
          description: an array of products filtered according to the specified parameters. also includes pagination details
          content:
            application/json:
              examples:
                search result:
                  value: |-
                    {
                        "products":[{},{}],
                        "count":2,
                        "total_count": 982,
                        "current_page":99,
                        "total_pages":99,
                        "next?": false,
                        "previous?": true
                    }
        '404':
          $ref: "#/components/responses/404"
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '429':
          $ref: '#/components/responses/429'
    post:
      security:
        - bearer_user_auth: []
      tags:
        - Products
      summary: creates a new product
      description: Requires Write Permission (Manager Create Permit).
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: Apple iPhone SE 2025
              details: The all new BUDGET iphone SE with AI ......
              price: 999.99
              stock: 3000
              images: [1,2,3,4,6]
      responses:
        '200':
          description: ' product created sucesfuly, returns the product object, the api updates the timestamps and tracks the id of the user to the created by'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
  /products/{id}:
    get:
      tags:
        - Products
      security:
        - public_no_auth: []
        - bearer_user_auth: []
      summary: 'gets a specific product by id'
      description: 'some of the details like if the product has been like are included in the case of a client.'
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
      responses:
        '200':
          description: a product object with the extra field of liked if user is logged in and of type client.
          content:
            application/json:
              examples:
                search result:
                  value: |-
                    {
                        ...data,
                        liked: boolean
                    }
        '404':
          $ref: "#/components/responses/404"
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
        '429':
          $ref: '#/components/responses/429'
    put:
      tags:
        - Products
      security:
        - bearer_user_auth: []
      summary: 'Updates product data'
      description: "This endpoint allows updating a product's data and toggling its disabled status. It requires Write Permission (Manager Update Permit) and only necessitates providing the product ID along with one additional field to update."
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: Apple iPhone SE 2025
              details: The all new BUDGET iphone SE with AI ......
              price: 999.99
              stock: 3000
              images: [1,2,3,4,6]
              disabled: false
      responses:
        '200':
          description: ' product created sucesfuly updated, returns the updated object, the api updates the timestamps and tracks the id of the user to the updated by, any omitted field is not updated.'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
        '404':
          $ref: "#/components/responses/404"
    delete:
      tags:
        - Products
      security:
        - bearer_user_auth: []
      summary: 'marks a product as deleted'
      description: 'this endpoint updates the "deleted" field of a specified product to true instead of performing a cascading delete. By marking the product as deleted, it is excluded from queries, except where its presence is required, such as in historical orders. This approach ensures that products remain identifiable for cleanup tasks once associated orders are finalized.'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'delete successful OR product already deleted'
        '404':
          $ref: "#/components/responses/404"
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
  /orders:
    get:
      tags:
        - Orders
      security:
        - bearer_user_auth: []
      summary: 'Lists orders with pagination and serves as the order search endpoint, primarily for managers.'
      description: "This endpoint returns orders based on the user's permissions, which may limit the fields included in the response. Disabled or out-of-stock products will be omitted. Any additional filtering, such as by disabled status, out-of-stock status, user updates, or date ranges (e.g., created at), should be performed on the client side. If more advanced or custom filtering options are needed, please notify the development team to consider adding a dedicated dashboard endpoint for these specific queries."
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: page_size
          schema:
            type: integer
            minimum: 1
            default: 10
        - in: query
          name: order_status
          schema:
            type: integer
          description: A status id to filter the results by
        - in: query
          name: payment_status
          schema:
            type: integer
          description: A status id to filter the results by
        - in: query
          name: search
          schema:
            type: string
          description: a text parameter to search for in client names and email or order number
        - in: query
          name: sort_by
          schema:
            type: string
          description: accepts a field name to order the orders by. ASC by default, if - on start of string is DESC.
          examples:
            by_price:
              summary: Oldest to Recent
              value: '-created_at '
            by_name:
              summary: Delivery Status
              value: 'order_status'
      responses:
        '200':
          description: an array of orders filtered according to the specified parameters. also includes pagination details
          content:
            application/json:
              examples:
                search result:
                  value: |-
                    {
                        "orders":[{},{}],
                        "count":2,
                        "total_count": 982,
                        "current_page":99,
                        "total_pages":99,
                        "next?": false,
                        "previous?": true
                    }
        '404':
          $ref: "#/components/responses/404"
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
    post:
      tags:
        - Orders
      security:
        - bearer_user_auth: []
      summary: creates a new order
      requestBody:
        required: true
        content:
          application/json:
            example:
              cart_item_ids: [1,2,3,4,56]
              other_info: like_address
      responses:
        '200':
          description: >-
            When an order is placed, the API automatically associates the client ID with the user ID of the submitting user. This call will also transfer the items from the cart into the order details and remove them from the cart. The timestamp and order statuses are set by default. The order is created before the first payment attempt is made, so the application must call the payment endpoint once there is an intent to process the payment.
          content:
            application/json:
              example:
                order_id: 1234
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
  /orders/{id}:
    get:
      summary: Gets an specific id. Client can only get their own orders. Managers can get any.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - bearer_user_auth: []
      tags:
        - Orders
      responses:
        '200':
          description: ok, returns order object and the list of the object details.
          content:
            application/json:
              examples:
                search result:
                  value: |-
                    {
                        "order": {},
                        "items": [{},{}]
                    }
        '400':
          $ref: "#/components/responses/400"
        '404':
          $ref: "#/components/responses/404"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
  /payments:
    post:
      tags:
        - Payments
      security:
        - bearer_user_auth: []
      summary: 'Step 1 of a Payment'
      description: 'This endpoint is used to initiate a payment by associating it with an order. It creates a Payment Intent object and logs it in the stripe_event_request. The payment_intent_details, combined with server-configured parameters, generates a payment object. Additionally, the order ID is included in the metadata. The payment status is set to "started". If the order ID does not exist, a 404 error is returned.'
      requestBody:
        content:
          application/json:
            example:
              order_id: 456
              stripe_api_version: 4.3
              payment_intent_details:
                amount: 123
                currency: USD
      responses:
        '200':
          description: payment intent created succesfully
        '400':
          $ref: "#/components/responses/400"
        '404':
          $ref: "#/components/responses/404"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
        '500':
          description: unable to create payment intent with stripe. Error details.
    get:
      summary: Worker endpoint, gets a list of payments to process.
      security:
        - bearer_system_auth: []
      responses:
        '200':
          description: array of ids that are needing processing by the worker.
        '401':
          $ref: '#/components/responses/401'
  /payments/{id}:
    post:
      tags:
        - Payments
      security:
        - bearer_system_auth: []
      summary: 'Step 4 worker processed the webhook event and wants to push updates.'
      description: "This API updates the order's payment status to reflect the outcome, setting the payment to success, fail, or cancelled. If the API determines that no further actions are needed for the payment, it will mark the payment as closed (true). For example, if the payment has failed, a new payment cycle should be initiated. However, this 'closed' status is not final for all transactions, as further actions such as refunds may still be required. Only the payment status and closed field are expected to be updated through this endpoint, as it is intended for use by the worker. Any other changes should be made using the PUT method."
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            example:
              closed: true
              payment_status: 3
      responses:
        '200':
          description: changes to payment made succesfully
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
    put:
      tags:
        - Payments
      security:
        - bearer_user_auth: []
      summary: 'Step 2 of a Payment - adds the payment card details to our intent'
      description: 'This step combines the payment card details with the payment intent. It overrides the stripe_event_request, ensuring that the updates are synchronized with Stripe as we modify them. This process also handles any other necessary fields that need to be updated. The status will either be "Awaiting Payment" or "Processing Payment" during this stage. If already confirmed, changes are disallowed as per stripe docs "During that time, you should disable your form from being resubmitted and show a waiting indicator like a spinner.'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            examples:
              updating with card info:
                value:
                  payment_details:
                    card_number: 123123123
                    cvc: 123123
                  other_fields_to_update:
                    - field1: value
                    - field2: value
                    - field3: value
              customer clicked pay as a final step, we want to charge card now:
                value:
                  confirm_payment: true
      responses:
        '200':
          description: payment intent updated succesfully AND/OR payment confirmation started succesfully
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
        '500':
          description: 'An error ocurred when pushing payment details to stripe. Error details : ...'
  /webhook:
    post:
      tags:
        - Payments
      security:
        - bearer_system_auth: []
      summary: "Step 3: 'We consume updates regarding our payment intent from Stripe"
      description: "In this step, we receive updates from Stripe regarding the payment intent. According to Stripe's documentation, no business logic should be executed at this stage; the only task is to record the incoming data. A worker will later process the response. This hook's primary function is to verify that the data transmission is correct, such as ensuring the JSON is valid. For example, the status might be 'Processing Payment.' The request we expect follows the specifications outlined in the Stripe API events documentation (https://docs.stripe.com/api/events/object), filtered by the event types we have configured in the Stripe webhook settings. The data is recorded in the stripe_webhook field. A 404 error could occur in rare cases where the order ID is not found in our systems, which will result in a failure."
      responses:
        '200':
          description: the event was recieved correctly.
        '400':
          $ref: "#/components/responses/400"
        '404':
          $ref: '#/components/responses/404'
        '401':
          $ref: '#/components/responses/401'
  /files:
    post:
      tags:
        - System
      security:
        - bearer_user_auth: []
      summary: 'Creates a new file'
      description: 'This endpoint allows users to upload a file after it is encoded in base64. It requires Write Permission (Manager Upload Permit). The file is first uploaded to a CDN, and once the upload is successful and a URL is returned, the system creates a file entry with associated metadata such as the file size and timestamp.'
      requestBody:
        required: true
        content:
          application/json:
            example:
              name: photo.png
              base64: 'aaaaaaaaaaaaadddddddddddddddddd3333333333344444'
      responses:
        '200':
          description: 'file upload in progess'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
  /files/{id}:
    delete:
      security:
        - bearer_user_auth: []
      tags:
        - System
      summary: 'Deletes a file'
      description: 'This endpoint deletes a file by first receiving the file ID. It then removes the file from the CDN and deletes the corresponding record. The operation requires the "Manager Delete Permit" permission.'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'file deleted'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
        '404':
          $ref: '#/components/responses/404'
        '500':
          description: something went wrong when deleting file from cdn. Error details...
  /carts:
    post:
      tags:
        - Orders
      security:
        - bearer_user_auth: []
      summary: 'Creates a new entry for an item in the cart'
      description: 'This endpoint adds a new entry to the cart table by associating a product ID with a user ID and specifying the quantity of the item in the cart. If the product already exists in the cart, subsequent requests will update the quantity or overwrite the existing entry with the same values. Repeated requests are allowed and will not create duplicate entries, only modify the existing one.'
      requestBody:
        required: true
        content:
          application/json:
            example:
              product_id: 3
              quantity: 1
      responses:
        '200':
          description: ' product created sucesfuly, returns the cart object, the api adds the timestamps and the user that submitted the request'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
  /carts/{user_id}:
    get:
      tags:
        - Products
      security:
        - bearer_user_auth: []
        - bearer_system_auth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      summary: 'Retrieves all items in a cart'
      description: 'This endpoint filters the cart rows based on the user-provided data or system criteria, such as marketing emails related to finishing shopping or alerts for discounts or low stock. It returns a 404 error if no items are found or if the user ID cannot be found.'
      responses:
        '200':
          description: 'cart filtered by user, in the case of system, the user can be another one'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: "#/components/responses/403"
        '404':
          $ref: '#/components/responses/404'
  /likes:
    post:
      tags:
        - Products
      security:
        - bearer_user_auth: []
      summary: 'A user submits a like for a product.'
      description: 'This endpoint allows a user to like a product. If the product has already been liked by the user, the request will not fail. The API automatically associates the user ID with the like request, ensuring the correct user is recorded.'
      requestBody:
        required: true
        content:
          application/json:
            example:
              product_id: 5
      responses:
        '200':
          description: 'successfully added to likes/already in likes'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '429':
          $ref: '#/components/responses/429'
  /likes/{id}:
    delete:
      tags:
        - Products
      security:
        - bearer_user_auth: []
      summary: 'A user wants to remove a liked product.'
      description: '404 also happens if the delete is called again for the same id.'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'successfully deleted'
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: "#/components/responses/404"
        '403':
          $ref: "#/components/responses/403"
  /promotions:
    post:
      tags:
        - System
      security:
        - bearer_system_auth: []
      summary: 'This endpoint is called periodically by a cron job to execute marketing logic.'
      description: 'This endpoint is executed on a scheduled basis to evaluate marketing conditions. One of the key conditions is to send an email notification to the last user who liked a product but has not purchased it when the product’s stock reaches 3. The endpoint also tracks failed executions, ensuring no action is taken if failures exceed a specified threshold. In such cases, a system administrator is notified if possible.'
      responses:
        '200':
          description: successfully ran the cron job
        '401':
          $ref: '#/components/responses/401'
        '500':
          description: something went wrong when executing the cronjob. Fail count is 2
  /emails:
    post:
      tags:
        - System
      security:
        - bearer_system_auth: []
      summary: 'Adds an email to the queue to be sent by worker'
      description: 'The 404 is for when attachments are not found'
      requestBody:
        content:
          application/json:
            example:
              sender_name: Marketing Team
              sender_address: marketing@email.com
              recipient_name: Dear XXXXXX XXXXXX Customer
              recipient_address: XXXX@legit_email.com
              reply_to email: sales_department@email.com
              subject: Stock for XXXX is low! Dont miss out!!
              text_content: the product you liked has only 3 units left!!!!
              html_content: <h1>the product you liked has only 3 units left!!!!</h1>
              attachments: [ 1, 3 ,4 ]
      responses:
        '202':
          description: email successfully added to queue
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: "#/components/responses/404"
  /emails/{id}:
    put:
      tags:
        - System
      security:
        - bearer_system_auth: []
      summary: 'Updates the status of an email job'
      description: 'If specified in request it returns the email object as to lock and retrieve the data in one go. This is a worker endpoint.'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            example:
              new_status: 5
              include_job: true
      responses:
        '200':
          description: status updated, includes email object if requested
        '404':
          $ref: "#/components/responses/404"
        '400':
          $ref: "#/components/responses/400"
        '401':
          $ref: "#/components/responses/401"